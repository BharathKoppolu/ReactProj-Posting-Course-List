Lifting State Up


if we have state that is manipulated in component A but is needed in componentB

we should lift the state up to the component which has access to both the components that need the state


------------ PostLists.js
import React, {useState} from 'react';
import Post from './Post';
import classes from './PostLists.module.css'
import NewPost from './NewPost';

const PostLists = () => {

    const [enteredBody, setEnteredBody] = useState('');
    const [enteredAuthor, setEnteredAuthor] = useState('');

    const bodyChangeHandler = (event) => {
        setEnteredBody(event.target.value);
    }  
    const authorChangeHandler = (event) => {
        setEnteredAuthor(event.target.value);
    }  
    return (
        <>
            <NewPost onBodyChange={bodyChangeHandler} onAuthorChange={authorChangeHandler}/>
            <ul className={classes.postLists}>
                <Post author={enteredAuthor} name={enteredBody} />
                <Post author="Angela Yu" name="Web Dev Course" />
            </ul>
        </>

    );
}

export default PostLists;

---------------NewPost.js

import classes from './NewPost.module.css';

const  NewPost = (props) => {

  return (
    <form className={classes.form}>
      <p>
        <label htmlFor="body">Text</label>
        <textarea id="body" required rows={3} onChange={props.onBodyChange}/>
      </p>
      
      <p>
        <label htmlFor="name">Your name</label>
        <input type="text" id="name" required onChange={props.onAuthorChange} />
      </p>
    </form>
  );
}

export default NewPost;




>>>  these input fields, you see that the component down

there gets updated dynamically with every key stroke

because of state and because we lifted state up

into a place where we can update and use it.